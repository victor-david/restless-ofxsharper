using System.Xml;

namespace Restless.OfxSharper.Core
{
    /// <summary>
    /// Represents the base class for a statement or a closing statement. This class must be inherited.
    /// </summary>
    public abstract class TransactionMessageBase : OfxObjectBase
    {
        #region Public properties
        /// <summary>
        /// TRNUID. Globally unique transaction wrapper id, generally generated by the client. See remarks.
        /// </summary>
        /// <remarks>
        /// <para>
        /// When a client originates a TRNUID, the value of the TRNUID is always set to a unique identifier. Clients expect the server 
        /// to return the same TRNUID in the corresponding response and can use this TRNUID to match up requests and responses. 
        /// Servers can use TRNUIDs to reject duplicate requests. Because multiple clients might be generating requests to the same server, 
        /// transaction IDs must be unique across clients. Thus, TRNUID must be a globally-unique ID.
        /// </para>
        /// <para>
        /// In some cases, servers can originate a transaction that was not specifically requested by a client. For instance, a client might 
        /// set up a recurring payment model.Although the client originates the payment model, the server originates the individual payments. 
        /// Whenever the server originates a transaction, the value of the TRNUID must be set to zero.
        /// </para>
        /// </remarks>
        [NodeInfo("TRNUID", Required = true)]
        public string TransactionWrapperUniqueId
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the status aggregate for this transaction message
        /// </summary>
        [NodeInfo("STATUS", Required = true)]
        public StatusAggregate Status
        {
            get;
            private set;
        }
        #endregion

        /************************************************************************/

        #region Constructor (protected)
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionMessageBase"/> class.
        /// </summary>
        /// <param name="rootNode">The root node from which to find data for this class.</param>
        protected TransactionMessageBase(XmlNode rootNode)
        {
            if (rootNode != null)
            {
                TransactionWrapperUniqueId = GetNodeValue(rootNode, nameof(TransactionWrapperUniqueId));
                var statusNode = GetNestedNode(rootNode, GetNodeName(nameof(Status)));
                if (statusNode != null)
                {
                    Status = new StatusAggregate(rootNode);
                }
            }
        }
        #endregion
    }
}
